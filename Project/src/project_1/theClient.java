package project_1;


import java.awt.Color;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import java.sql.SQLException;
import javax.swing.*;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author acer
 */
/*
 * Bir istemci uygulamasını temsil eder ve bir sohbet uygulaması gibi ağ üzerinde iletişim kurmaya yöneliktir. İşlevleri aşağıdaki gibidir:
    theClient sınıfı, bir JFrame bileşeni olarak tanımlanır.
    Source sınıfından bir nesne (OOP) oluşturulur. Bu nesne, grafik arayüzünde renk değişikliklerini yönetmek için kullanılabilir.
    username, projectKey ve address gibi değişkenler tanımlanır.
    isConnected değişkeni, istemcinin sunucuya bağlı olup olmadığını takip etmek için kullanılır.
    Socket, BufferedReader ve PrintWriter gibi ağ iletişimi için gerekli nesneler tanımlanır.
    Bir SQL veritabanı bağlantısı için Connection nesnesi ve ilgili nesneler oluşturulur.
    Kullanıcıların ve projelerin anahtarlarının depolanması için ArrayList ve HashMap kullanılır.
    GUI bileşenleri (JTextField, JButton vb.) tanımlanır.
    İstemci başlatıldığında veya bir proje adı belirtildiğinde, initComponents() metodu çağrılarak arayüz başlatılır.
    ListenThread() metodu, gelen mesajları dinlemek için bir thread başlatır.
    userAdd(), userRemove() ve writeUsers() gibi yardımcı metodlar, kullanıcıların eklenmesi, çıkarılması ve listelenmesi için kullanılır.
    sendDisconnect() ve Disconnect() metodları, bağlantının sonlandırılması için kullanılır.
Bir ağ üzerinde mesajlaşma sağlayan bir istemci uygulamasıdır. İstemci, sunucuya bağlanabilir, diğer kullanıcıların bağlantı durumlarını takip edebilir ve mesaj gönderebilir veya alabilir.
 */
public class theClient extends javax.swing.JFrame {

    Source OOP = new Source();
    String username, projectKey, address = "localhost";
    Boolean isConnected = false;

    Socket theSocket;
    BufferedReader theReader;
    PrintWriter theWriter;

    Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs = null;

    ArrayList<String> users = new ArrayList<>();
    HashMap<String, String> projectKeys = new HashMap<>(); // Kullanıcıların projelerinin anahtarlarını tutar

    private JTextField hostField;
    private JTextField portField;
    private JButton sendButton;


    public theClient(String clientName) {
        initComponents();
        client_Name.setText(clientName);
    }
    
    public void ListenThread() {
        Thread IncomingReader = new Thread(new Message());
        IncomingReader.start();
    }

    public void userAdd(String data) {
        users.add(data);
    }

    public void userRemove(String data) {
        sentMessage.append(data + " is now offline.\n");
    }

    public void writeUsers() {
        String[] tempList = new String[(users.size())];
        users.toArray(tempList);
        for (String token : tempList) {

        }
    }

    public void sendDisconnect() {
        String bye = (username + ": :Disconnect");
        try {
            theWriter.println(bye);
            theWriter.flush();
        } catch (Exception e) {
            sentMessage.append("You're not connected.\n");
        }
    }

    public void Disconnect() {
        try {
            sentMessage.append("Disconnected.\n");
            theSocket.close();
        } catch (Exception ex) {

        }
        isConnected = false;
        client_Name.setEditable(true);

    }

    public theClient() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sentMessage = new javax.swing.JTextArea();
        Message = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        disConnect = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        isConnnected = new javax.swing.JLabel();
        client_Name = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        Send = new javax.swing.JLabel();
        btn_go_back_main_bridge2 = new javax.swing.JButton();
        btn_connect_server_with_owner = new javax.swing.JButton();

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 56, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        sentMessage.setBackground(new java.awt.Color(240, 240, 240));
        sentMessage.setColumns(20);
        sentMessage.setFont(new java.awt.Font("Segoe Script", 1, 11)); // NOI18N
        sentMessage.setRows(5);
        jScrollPane1.setViewportView(sentMessage);

        Message.setFont(new java.awt.Font("Segoe Script", 1, 11)); // NOI18N
        Message.setText("Your messages");
        Message.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Message.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MessageKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                MessageKeyReleased(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        disConnect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8_disconnected_30px_1.png"))); // NOI18N
        disConnect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                disConnectMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                disConnectMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                disConnectMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(disConnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(disConnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        isConnnected.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8_connect_30px.png"))); // NOI18N
        isConnnected.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                isConnnectedMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                isConnnectedMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                isConnnectedMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(isConnnected, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(isConnnected, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        client_Name.setBackground(new java.awt.Color(240, 240, 240));
        client_Name.setFont(new java.awt.Font("Segoe Script", 1, 11)); // NOI18N
        client_Name.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        client_Name.setText("Client name");
        client_Name.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        client_Name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                client_NameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                client_NameKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                client_NameKeyTyped(evt);
            }
        });

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8_people_30px_1.png"))); // NOI18N
        jLabel4.setText(".");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("...");

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        Send.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Send.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8_paper_plane_30px.png"))); // NOI18N
        Send.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SendMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                SendMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                SendMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Send, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(Send))
        );

        btn_go_back_main_bridge2.setBackground(new java.awt.Color(69, 73, 74));
        btn_go_back_main_bridge2.setText("GO BACK MAIN BRIDGE");
        btn_go_back_main_bridge2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_go_back_main_bridge2ActionPerformed(evt);
            }
        });

        btn_connect_server_with_owner.setText("CONNECT SERVER");
        btn_connect_server_with_owner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_connect_server_with_ownerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(10, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(client_Name, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(32, 32, 32))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Message, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btn_go_back_main_bridge2)
                        .addGap(40, 40, 40)
                        .addComponent(btn_connect_server_with_owner)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(client_Name, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Message, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_go_back_main_bridge2)
                    .addComponent(btn_connect_server_with_owner))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /* 
     * Bir fare tıklaması olayını işleyen bir metod tanımlar ve genel olarak şu işlemleri gerçekleştirir:
    Kullanıcının projeyi belirttiği bir JTextField (client_Name) üzerinde bir fare tıklaması algılandığında bu metod çalışır.
    Bu metod, JTextField içindeki metne bağlı olarak bir dizi durum kontrolü yapar.
        Eğer metin boşsa veya "Client name" veya "Input your project name!!" ise, JTextField'e bir uyarı mesajı yazılır.
        Aksi takdirde, veritabanından projeye katılan kullanıcıların bilgilerini almak için bir sorgu hazırlanır ve çalıştırılır.
    Sorgudan dönen sonuçlara göre, belirli bir kullanıcıya ait bağlantı kurulur ve gerekli işlemler yapılır.
        Eğer kullanıcı projenin sahibi ise, kullanıcı adı ve bağlantı mesajı gönderilir.
        Eğer kullanıcı projenin üyesi ise, ilgili üye için de aynı işlemler gerçekleştirilir.
    Eğer belirli bir kullanıcı bulunamazsa, bir hata mesajı yazılır ve JTextField düzenlenebilir hale getirilir.
    Bağlantı başlatma işlemi gerçekleşirse, dinleme işlemi başlatılır ve gerekli mesajlar ekrana yazdırılır.
    Bağlantı zaten kuruluysa, bir bağlantı olduğu mesajı ekrana yazdırılır.
Kullanıcının belirli bir projeye bağlanmasını ve diğer projeye katılan kullanıcılarla iletişim kurmasını sağlar.
    */
    private void isConnnectedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_isConnnectedMouseClicked
        // TODO add your handling code here:

        switch (client_Name.getText()) {
            case "":
                client_Name.setText("Input your project name!!");
                break;
            case "Client name":
                client_Name.setText("Input your project name!!");
                break;
            case "Input your project name!!":
                break;
            default:
                jLabel5.setForeground(Color.GREEN);
                if (isConnected == false) {
                    String enteredProjectName = client_Name.getText();
                    client_Name.setEditable(false);
    
                    try {
                        // Users.db veritabanına bağlan
                        con = DriverManager.getConnection("jdbc:sqlite:Users.db");
    
                        // Girilen proje adına karşılık gelen kullanıcı adını ve proje sahibini veritabanından al
                        String sql = "SELECT UserName, project_owner FROM ProjectMembers INNER JOIN Projects ON ProjectMembers.ProjectName = Projects.project_name WHERE ProjectName = ?;";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, enteredProjectName);
                        rs = pst.executeQuery();
                        
                        boolean userFound = false;

                        while (rs.next()) {
                            username = rs.getString("UserName");
                            String projectOwner = rs.getString("project_owner");

                            theSocket = new Socket(address, 2222);
                            InputStreamReader streamreader = new InputStreamReader(theSocket.getInputStream());
                            theReader = new BufferedReader(streamreader);
                            theWriter = new PrintWriter(theSocket.getOutputStream());
                            isConnected = true;

                            // Proje sahibini sentMessage JTextArea'ya yaz
                            sentMessage.append("Project Owner: " + projectOwner + "\n");

                            // Mevcut kullanıcının kullanıcı adını al
                            String currentUsername = CurrentUser.getInstance().getUsername();

                            // Mevcut kullanıcı proje sahibi mi kontrol et
                            if (currentUsername.equals(projectOwner)) {
                                // Proje sahibi ise, proje sahibinin kullanıcı adını ve mesajı theWriter aracılığıyla gönder
                                theWriter.println(currentUsername + " : " + "has connected :Connect");
                                theWriter.flush();
                                userFound = true;
                                break;
                            } else if (currentUsername.equals(username)) {
                                // Proje sahibi değilse, proje üyesinin kullanıcı adını ve mesajı theWriter aracılığıyla gönder
                                theWriter.println(username + " : " + "has connected :Connect");
                                theWriter.flush();
                                userFound = true;
                                break;
                            }
                        }

                        if (!userFound) {
                            sentMessage.append("No such user found! \n");
                            client_Name.setEditable(true);
                        }

                        
                    } catch (Exception ex) {
                        sentMessage.append("Cannot Connect! Try Again. \n");
                        client_Name.setEditable(true);
                    }
    
                    ListenThread();
    
                } else if (isConnected == true) {
                    sentMessage.append("You are connected. \n");
                }
    
        }

    }//GEN-LAST:event_isConnnectedMouseClicked
/* 
 * bir fare tıklaması olayını işleyen bir metodu tanımlar. Genel olarak şu işlemleri gerçekleştirir:
    Kullanıcı bir bileşene tıkladığında (muhtemelen bir buton), bu metod çalışır.
    İlk olarak, sendDisconnect() metodunu çağırarak, istemcinin sunucuya bir "bağlantı kesme" mesajı göndermesini sağlar. Bu mesaj, sunucudaki diğer kullanıcılara, istemcinin bağlantısının koptuğunu bildirir.
    Ardından, jLabel5 bileşeninin metin rengini siyah (Color.black) olarak değiştirir. Bu genellikle bir bildirim veya durum göstergesi olabilir.
    Son olarak, Disconnect() metodunu çağırarak, istemcinin bağlantısını sonlandırır. Bu işlem, istemcinin sunucudan ayrılmasını ve ağ kaynaklarını serbest bırakmasını sağlar.
istemcinin sunucudan bağlantısını kesmesini ve gerekli temizlik işlemlerini yapmasını sağlar.
*/
    private void disConnectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_disConnectMouseClicked
        // TODO add your handling code here:
        sendDisconnect();
        jLabel5.setForeground(Color.black);
        Disconnect();
    }//GEN-LAST:event_disConnectMouseClicked

    public void addMessage(String message) {
        // Mesajı JTextArea'ya eklemek için kullanılır.
        sentMessage.append(message + "\n"); 
    }
/**
 * Bir fare tıklaması olayını işleyen bir metodu tanımlar. Genel olarak şu işlemleri gerçekleştirir:
    Kullanıcının bir bileşene tıkladığında (muhtemelen bir buton), bu metod çalışır.
    İlk olarak, kullanıcının girdiği metin (Message) kontrol edilir:
        Eğer metin boşsa veya "Your messages" ise, kullanıcıya "Type your message here" mesajı gösterilir ve metin alanına odaklanılır.
        Aksi takdirde, kullanıcının girdiği proje adı ve mesaj bilgileri kullanılarak işlemler gerçekleştirilir:
            Veritabanından gerekli bilgiler alınır (projeye ait kullanıcılar vs.).
            Mevcut kullanıcının proje sahibi mi yoksa üye mi olduğu kontrol edilir.
            Mesaj, proje sahibine veya üyelere gönderilir.
            Bağlantı bulunamazsa veya bir hata oluşursa, kullanıcıya uygun bir mesaj gösterilir.
    Son olarak, metin alanı temizlenir ve odaklanılır.
Kullanıcının mesaj göndermesini sağlar ve gönderilen mesajın proje sahibine veya üyelerine iletilmesini sağlar. Ayrıca, kullanıcıya gerekli geri bildirimleri gösterir.
*/
    private void SendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SendMouseClicked
        switch (Message.getText()) {
            case "":
                Message.setText("Type your message here");
                Message.requestFocus();
                break;
            case "Your messages":
                Message.setText("Type your message here");
                Message.requestFocus();
                break;
            default:
                try {
                    // Users.db veritabanına bağlan
                    con = DriverManager.getConnection("jdbc:sqlite:Users.db");

                    // Mevcut kullanıcının kullanıcı adını al
                    String currentUsername = CurrentUser.getInstance().getUsername();

                    // Kullanıcının girdiği proje adını al
                    String enteredProjectName = client_Name.getText();

                    // Girilen proje adına karşılık gelen proje sahibinin kullanıcı adını veritabanından al
                    String sql = "SELECT project_owner, UserName FROM Projects JOIN ProjectMembers ON Projects.project_name = ProjectMembers.ProjectName WHERE project_name = ?;";
                    pst = con.prepareStatement(sql);
                    pst.setString(1, enteredProjectName);
                    rs = pst.executeQuery();

                    boolean userFound = false;

                    while (rs.next()) {
                        String projectOwnerUsername = rs.getString("project_owner");
                        String username = rs.getString("UserName");

                        // Mevcut kullanıcı proje sahibi mi kontrol et
                        if (currentUsername.equals(projectOwnerUsername)) {
                            // Proje sahibi ise, proje sahibinin kullanıcı adını sentMessage JTextArea'ya yaz
                            //sentMessage.append("Project Owner: " + projectOwnerUsername + "\n");

                            // Proje sahibinin kullanıcı adını, mesajı ve seçilen emojiyi theWriter aracılığıyla gönder
                           // String selectedEmoji = (String) jcb_emoji.getSelectedItem();
                            theWriter.println(currentUsername + " : " + Message.getText()  + ":" + "Chat");
                            theWriter.flush(); // JTextArea'ya mesajı eklemek için
                            userFound = true;
                            break;
                        } else if (currentUsername.equals(username)) {
                            // Proje sahibi değilse, proje üyesinin kullanıcı adını sentMessage JTextArea'ya yaz
                            sentMessage.append("Project Member: " + username + "\n");

                            // Proje üyesinin kullanıcı adını, mesajı ve seçilen emojiyi theWriter aracılığıyla gönder
                            //String selectedEmoji = (String) jcb_emoji.getSelectedItem();
                            theWriter.println(currentUsername + " : " + Message.getText()  + ":" + "Chat");
                            theWriter.flush();
                            userFound = true;
                            break;
                        }
                    }

                    if (!userFound) {
                        sentMessage.append("You're not connected. \n");
                    }
                } catch (Exception ex) {
                    sentMessage.append("You're not connected. \n");
                }
                Message.setText("");
                Message.requestFocus();

        }

        Message.setText("Your messages");
        Message.requestFocus();
        
    }//GEN-LAST:event_SendMouseClicked
/*
 * Grafik arayüzünde çeşitli olayları (fare tıklamaları, tuş vuruşları, fare girişleri vb.) işleyen ve arayüzdeki bazı bileşenlerin davranışlarını değiştiren kod parçalarını içerir. İşlevleri özetlemek gerekirse:
    MessageKeyPressed: Kullanıcının mesaj gönderme alanına bir tuş vuruşu yaptığında, "Your messages" olan varsayılan metin alanını temizler.
    client_NameKeyPressed: Kullanıcının isim giriş alanına bir tuş vuruşu yaptığında, "Client name" olan varsayılan metin alanını temizler.
    isConnnectedMouseEntered ve isConnnectedMouseExited: Bağlantı durumunu gösteren bir bileşene fare giriş/çıkış yapıldığında, bileşenin arka plan rengini değiştirir.
    disConnectMouseEntered ve disConnectMouseExited: Bağlantıyı sonlandırma işlemini temsil eden bir bileşene fare giriş/çıkış yapıldığında, bileşenin arka plan rengini değiştirir.
    client_NameKeyTyped: Kullanıcının isim giriş alanına bir tuş basıldığında, "Client name" olan varsayılan metin alanını temizler.
    client_NameKeyReleased: Kullanıcının isim giriş alanından tuş bıraktığında, girilen ismi büyük harfle başlatır.
    SendMouseEntered ve SendMouseExited: Mesaj gönderme butonuna fare giriş/çıkış yapıldığında, butonun arka plan rengini değiştirir.
    MessageKeyReleased: Kullanıcının mesaj gönderme alanından tuş bıraktığında, girilen mesajı büyük harfle başlatır.
    btn_go_back_main_bridge2ActionPerformed: Belirli bir butona tıklandığında, başka bir JFrame'e geçiş yapar ve mevcut JFrame'i kapatır.
Bu metodlar, grafik arayüzünde kullanıcı etkileşimlerini yönetmek için kullanılır ve arayüz bileşenlerinin davranışlarını ayarlar.
 */
    private void MessageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MessageKeyPressed
        if (Message.getText().equals("Your messages"))
            Message.setText("");
    }//GEN-LAST:event_MessageKeyPressed

    private void client_NameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_client_NameKeyPressed
        // TODO add your handling code here:
        if (client_Name.getText().equals("Client name"))
            client_Name.setText("");
    }//GEN-LAST:event_client_NameKeyPressed

    private void isConnnectedMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_isConnnectedMouseEntered
        // TODO add your handling code here:
        OOP.changeColor(jPanel4);
    }//GEN-LAST:event_isConnnectedMouseEntered

    private void isConnnectedMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_isConnnectedMouseExited
        // TODO add your handling code here:
        OOP.NormalWhite(jPanel4);
        //tf_username.setText("Client name");
    }//GEN-LAST:event_isConnnectedMouseExited

    private void disConnectMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_disConnectMouseEntered
        // TODO add your handling code here:
        OOP.changeColor(jPanel3);
    }//GEN-LAST:event_disConnectMouseEntered

    private void disConnectMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_disConnectMouseExited
        // TODO add your handling code here:
        OOP.NormalWhite(jPanel3);
    }//GEN-LAST:event_disConnectMouseExited

    private void client_NameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_client_NameKeyTyped
        // TODO add your handling code here:     
        switch (client_Name.getText()) {
            case "Client name":
                client_Name.setText("");
                break;
            case "Input yuor name!!":
                client_Name.setText("");
            default:
        }
    }//GEN-LAST:event_client_NameKeyTyped

    private void client_NameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_client_NameKeyReleased
        // TODO add your handling code here:
        switch (client_Name.getText()) {
            case "":
                client_Name.setText("Client name");
                break;
            default:
                String name = client_Name.getText();
                String result = name.substring(0, 1).toUpperCase() + name.substring(1);
                client_Name.setText(result);
        }

    }//GEN-LAST:event_client_NameKeyReleased

    private void SendMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SendMouseEntered
        // TODO add your handling code here:
        OOP.changeColor(jPanel5);
    }//GEN-LAST:event_SendMouseEntered

    private void SendMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SendMouseExited
        // TODO add your handling code here:
        OOP.NormalWhite(jPanel5);
    }//GEN-LAST:event_SendMouseExited

    private void MessageKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MessageKeyReleased
        // TODO add your handling code here:
        switch (Message.getText()) {
            case "":
                Message.setText("Your messages");
                break;
            default:
                String name = Message.getText();
                String result = name.substring(0, 1).toUpperCase() + name.substring(1);
                Message.setText(result);
        }
    }//GEN-LAST:event_MessageKeyReleased

    private void btn_go_back_main_bridge2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_go_back_main_bridge2ActionPerformed
        // TODO add your handling code here:
        // Create a new instance of Main_bridge JFrame
        Main_bridge mainBridgeFrame = new Main_bridge();
        
        // Make the Main_bridge JFrame visible
        mainBridgeFrame.setVisible(true);
        
        // Dispose the current JFrame
        this.dispose();

    }//GEN-LAST:event_btn_go_back_main_bridge2ActionPerformed
/*
 * Bir butona tıklandığında çalışan bir işlemi tanımlar. Genel olarak şu işlemleri gerçekleştirir:
    Kullanıcının mevcut kullanıcı adını alır.
    Kullanıcının girdiği proje adını alır.
    Ardından, Users.db veritabanına bağlanır.
    Veritabanından girilen proje adına karşılık gelen proje sahibinin kullanıcı adını alır.
    Eğer proje sahibi mevcut kullanıcı ise, bir sunucu penceresi (theServer) açılır.
    Eğer proje sahibi mevcut kullanıcı değilse, bir uyarı mesajı gösterilir.
    Eğer girilen proje adına karşılık gelen bir proje bulunamazsa, bir uyarı mesajı gösterilir.
    İşlemler tamamlandıktan sonra, veritabanı kaynakları kapatılır ve gerekli temizlik işlemleri yapılır.
kullanıcının proje sahibi olduğu durumlarda sunucu penceresini başlatmasını sağlar ve gerekli hata durumlarında uygun uyarı mesajlarını gösterir.
 */
    private void btn_connect_server_with_ownerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_connect_server_with_ownerActionPerformed
        // TODO add your handling code here:
        // Proje sahibi olan kişi proje için server'ı başlatmaktan sorumludur.

        // Mevcut kullanıcının kullanıcı adını al
        String currentUsername = CurrentUser.getInstance().getUsername();

        // Kullanıcının girdiği proje adını al
        String enteredProjectName = client_Name.getText();

        try {
            // Users.db veritabanına bağlan
            con = DriverManager.getConnection("jdbc:sqlite:Users.db");

            // Girilen proje adına karşılık gelen proje sahibinin kullanıcı adını veritabanından al
            String sql = "SELECT project_owner FROM Projects WHERE project_name = ?;";
            pst = con.prepareStatement(sql);
            pst.setString(1, enteredProjectName);
            rs = pst.executeQuery();

            if (rs.next()) {
                String projectOwnerUsername = rs.getString("project_owner");

                // Mevcut kullanıcı proje sahibi mi kontrol et
                if (currentUsername.equals(projectOwnerUsername)) {
                    // Proje sahibi ise, theServer JFrame'ini aç
                    theServer serverFrame = new theServer();
                    serverFrame.setVisible(true);
                } else {
                    // Proje sahibi değilse, bir uyarı mesajı göster
                    JOptionPane.showMessageDialog(this, "Proje sahibi değilsiniz!");
                }
            } else {
                // Girilen proje adına karşılık gelen bir proje bulunamadı
                JOptionPane.showMessageDialog(this, "Girilen proje adı bulunamadı!");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Veritabanı sorgusu başarısız oldu," + e);
        } finally {
            // Kaynakları temizle
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pst != null) {
                    pst.close();
                }
                if (con != null) {
                    con.close();
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Veritabanı kaynaklarını kapatırken hata oluştu," + ex);
            }
        }
    }//GEN-LAST:event_btn_connect_server_with_ownerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(theClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(theClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(theClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(theClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new theClient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Message;
    private javax.swing.JLabel Send;
    private javax.swing.JButton btn_connect_server_with_owner;
    private javax.swing.JButton btn_go_back_main_bridge2;
    private javax.swing.JTextField client_Name;
    private javax.swing.JLabel disConnect;
    private javax.swing.JLabel isConnnected;
    private javax.swing.JLabel jLabel4;
    public javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea sentMessage;
    // End of variables declaration//GEN-END:variables
 public class Message implements Runnable {

        @Override
        public void run() {
            String[] data;
            String stream;

            try {
                while (!(stream = theReader.readLine()).equals(null)) {
                    data = stream.split(":");

                    switch (data[2]) {
                        case "Chat":
                            sentMessage.append(data[0] + ":" + data[1] + "\n");
                            sentMessage.setCaretPosition(sentMessage.getDocument().getLength());
                            break;
                        case "Connnect":
                            sentMessage.removeAll();
                            userAdd(data[0]);
                            break;
                        case "Disconnect":
                            userRemove(data[0]);
                            break;
                        case "Done":
                            writeUsers();
                            users.clear();
                    }
                }
            } catch (Exception ex) {
            }
        }
    }
}
