/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project_1;

import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.io.DataOutputStream;
import javax.swing.table.DefaultTableModel;
import project_1.theClient;

/**
 *
 * @author Lenovo
 */
public class Main_bridge extends javax.swing.JFrame {

    String username, projectKey, address = "localhost";
    Boolean isConnected = false;


    Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs = null;

    Socket theSocket;
    BufferedReader theReader;
    PrintWriter theWriter;

    ArrayList<String> users = new ArrayList<>();
    HashMap<String, String> projectKeys = new HashMap<>(); // Kullanıcıların projelerinin anahtarlarını tutar


    /**
     * Creates new form Main_bridge
     */
    public Main_bridge() {
        initComponents();
        // Veritabanından girilen kullanıcı adı alınır.
        String username = CurrentUser.getInstance().getUsername();
        // ilgili txt metnine kullanıcı Merhaba ve adı yazılır.
        txt_name.setText("MERHABA " + username);
        // NewAccountsConnection klasındaki NewAccountsConnectionDB fonksiyonunu çalıştırıyor.
        con = NewAccountsConnection.NewAccountsConnectionDB();
        // Uygulamayı sayfanın ortasında başlatıyor.
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        btn_create_Project = new javax.swing.JButton();
        btn_join_project_with_project_id = new javax.swing.JButton();
        txt_project_name = new javax.swing.JTextField();
        txt_project_id = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_joınt_project_Table = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_create_project_Table1 = new javax.swing.JTable();
        btn_show_all_create_project = new javax.swing.JButton();
        btn_show_all_joın_project = new javax.swing.JButton();
        txt_name = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));

        btn_create_Project.setText("CREATE PROJECT");
        btn_create_Project.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_create_ProjectActionPerformed(evt);
            }
        });

        btn_join_project_with_project_id.setText("JOIN PROJECT WITH PROJECT ID");
        btn_join_project_with_project_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_join_project_with_project_idActionPerformed(evt);
            }
        });

        tbl_joınt_project_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tbl_joınt_project_Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_joınt_project_TableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_joınt_project_Table);

        tbl_create_project_Table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tbl_create_project_Table1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_create_project_Table1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbl_create_project_Table1);

        btn_show_all_create_project.setText("SHOW ALL CREATE PROJECT");
        btn_show_all_create_project.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_show_all_create_projectActionPerformed(evt);
            }
        });

        btn_show_all_joın_project.setText("SHOW ALL JOIN PROJECT");
        btn_show_all_joın_project.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_show_all_joın_projectActionPerformed(evt);
            }
        });

        txt_name.setEditable(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_show_all_create_project, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btn_join_project_with_project_id, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btn_show_all_joın_project, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(btn_create_Project, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(txt_project_id, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(txt_project_name, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(txt_name, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 19, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(txt_name, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txt_project_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_create_Project)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_show_all_create_project)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap(48, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(txt_project_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_join_project_with_project_id)
                        .addGap(18, 18, 18)
                        .addComponent(btn_show_all_joın_project, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents



    /*
     * Bir projeye katılmak için kullanıcının proje kimliğini girdiği bir arayüzdeki bir düğmenin tıklanma olayını işler. İşlem adımları şu şekildedir:
    Veritabanıyla bağlantı kurmak için gerekli nesneler oluşturulur: Connection, PreparedStatement ve ResultSet.
    Kullanıcıdan gelen proje kimliği alınır (txt_project_id alanından).
    Mevcut kullanıcı adı, CurrentUser sınıfının bir örneği kullanılarak alınır.
    Veritabanından, girilen proje kimliğine karşılık gelen proje adı ve proje kimliği (ROWID) alınır.
    Kullanıcının zaten proje üyesi olup olmadığı kontrol edilir.
    Eğer kullanıcı proje üyesi değilse, kullanıcı proje üyeliği eklenir ve istemci arayüzü açılır.
    Eğer kullanıcı zaten proje üyesiyse, ilgili mesaj yazdırılır.
    Bağlantı ve diğer veritabanı kaynakları kapatılır.
    kullanıcının belirli bir projeye katılmasını sağlar. Proje verileri ve kullanıcı üyelikleri, bir SQLite veritabanında saklanır ve bu kod, kullanıcının girdiği proje kimliğini kullanarak veritabanından gerekli bilgileri alır ve işler.
     */
    private void btn_join_project_with_project_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_join_project_with_project_idActionPerformed
        
        Connection conn = null;
        PreparedStatement pstmt = null, pstmtCheck = null, pstmtInsert = null;
        ResultSet rs = null, rsCheck = null;
        try {
            Class.forName("org.sqlite.JDBC");
            String dbPath = "C://Users//Casper//OneDrive//Documents//NetBeansProjects//Project//Users.db";
            conn = DriverManager.getConnection("jdbc:sqlite:" + dbPath);
            System.out.println("Connection Succeeded");

            // Get the project key from the JTextField
            String projectKey = txt_project_id.getText();

            // Get the username from the CurrentUser singleton
            String username = CurrentUser.getInstance().getUsername();

            // Query the database for the project name and ROWID
            String sql = "SELECT ROWID, project_name FROM Projects WHERE project_key = ?";
            pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, projectKey);
            rs = pstmt.executeQuery();

            // Check if a project name was found
            if (rs.next()) {
                int projectId = rs.getInt("ROWID");
                String projectName = rs.getString("project_name");

                // Check if the user is already a member of the project
                String sqlCheck = "SELECT * FROM ProjectMembers WHERE ProjectID = ? AND Username = ?";
                pstmtCheck = conn.prepareStatement(sqlCheck);
                pstmtCheck.setInt(1, projectId);
                pstmtCheck.setString(2, username);
                rsCheck = pstmtCheck.executeQuery();

                if (!rsCheck.next()) {
                    // Add the user to the ProjectMember table
                    String sqlInsert = "INSERT INTO ProjectMembers(ProjectID, ProjectName, Username) VALUES (?, ?, ?)";
                    pstmtInsert = conn.prepareStatement(sqlInsert);
                    pstmtInsert.setInt(1, projectId);
                    pstmtInsert.setString(2, projectName);
                    pstmtInsert.setString(3, username); 
                    pstmtInsert.executeUpdate();

                    // Open the Client JFrame
                    theClient clientFrame = new theClient(projectName);
                    clientFrame.setVisible(true);
                    this.dispose();
                } else {
                    System.out.println("User is already a member of the project");
                }
            } else {
                System.out.println("No project found with the provided key");
            }

        } catch (Exception e) {
            System.out.println("Connection Failed" + e);
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (rsCheck != null) {
                    rsCheck.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
                if (pstmtCheck != null) {
                    pstmtCheck.close();
                }
                if (pstmtInsert != null) {
                    pstmtInsert.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        
        
    }//GEN-LAST:event_btn_join_project_with_project_idActionPerformed
    /*
     * Bir proje oluşturmak için kullanıcının girdiği bilgileri işleyen bir işlemi gerçekleştiriyor. İşlem adımları şu şekildedir:
    Veritabanı bağlantısı oluşturulur.
    Kullanıcı tarafından girilen proje adı (txt_project_name) alınır.
    Veritabanında bu proje adının daha önce var olup olmadığı kontrol edilir. Eğer aynı isimde bir proje bulunursa, işlem sonlandırılır.
    Eğer yeni bir proje ise, proje için rastgele bir anahtar oluşturulur (projectKey).
    Mevcut kullanıcı adı (username) alınır.
    Yeni proje veritabanına eklenir.
    Kullanıcıya proje anahtarı ile ilgili bir mesaj gönderilir (output.txt dosyasına yazılır).
    Projenin yönetim arayüzü olan theClient penceresi oluşturulur ve görünür hale getirilir.
    Gerekli veritabanı kaynakları ve dosya yazıcı kapatılır.
    kullanıcının girdiği proje adına göre yeni bir proje oluşturur ve bu projenin anahtarını kullanıcıya bildirir. Ayrıca, yeni projenin yönetim arayüzünü açar.
     */
    private void btn_create_ProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_create_ProjectActionPerformed
        // Bu düğmeye basınca theClient.java jframe'in içindeki client_Name adındaki JtextField'ın değerine burada girdiğim txt_project_name içindeki değeri yazıp theClient.java jframe'i sınıfını çalıştırmak istiyorum.
        
        Connection con = null;
        PreparedStatement checkProjectStatement = null, createProjectStatement = null;
        Statement st = null;
        ResultSet rs = null;
        PrintWriter theWriter = null;
        try {
            String url = "jdbc:sqlite:C://Users//Casper//OneDrive//Documents//NetBeansProjects//Project//Users.db";
            con = DriverManager.getConnection(url);
            System.out.println("Veritabanına bağlandınız!");

            String clientName = txt_project_name.getText();

            // Veritabanında bu project_name'in zaten var olup olmadığını kontrol et
            checkProjectStatement = con.prepareStatement("SELECT * FROM Projects WHERE project_name = ?");
            checkProjectStatement.setString(1, clientName);
            rs = checkProjectStatement.executeQuery();
            if (rs.next()) {
                System.out.println("A project with this name already exists.");
                return; // Eğer bu project_name zaten varsa, metodu burada sonlandır
            }

            Random rand = new Random();
            int randInt = rand.nextInt(100000); // Rastgele bir sayı oluştur

            // Proje anahtarı oluştur
            projectKey = "KEY_" + randInt;

            // Veritabanından username al
            String sql = "SELECT UserName FROM Users"; // Burada doğru sorguyu belirttiğinizden emin olun
            st = con.createStatement();
            rs = st.executeQuery(sql);
            String username = CurrentUser.getInstance().getUsername();

            // Veritabanına proje ekle
            createProjectStatement = con.prepareStatement("INSERT INTO Projects(project_name, project_key, project_owner) VALUES (?, ?, ?)");
            createProjectStatement.setString(1, clientName);
            createProjectStatement.setString(2, projectKey);
            createProjectStatement.setString(3, username);
            createProjectStatement.executeUpdate();

            // theWriter'ı başlat
            theWriter = new PrintWriter(new FileOutputStream(new File("output.txt"), true));

            theWriter.println(username + ": Your project key is " + projectKey);
            theWriter.flush();

            theClient client = new theClient(clientName);
            client.setVisible(true);
            this.dispose(); // Eğer mevcut pencereyi kapatmak isterseniz bu satırı kullanabilirsiniz
        } catch (Exception e) {
            System.out.println("Connection Failed" + e);
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (st != null) {
                    st.close();
                }
                if (checkProjectStatement != null) {
                    checkProjectStatement.close();
                }
                if (createProjectStatement != null) {
                    createProjectStatement.close();
                }
                if (con != null) {
                    con.close();
                }
                if (theWriter != null) {
                    theWriter.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    


    }//GEN-LAST:event_btn_create_ProjectActionPerformed
    private void tbl_joınt_project_TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_joınt_project_TableMouseClicked
        // TABLOYA MOUSE TIKLAMA ÖZELLIĞI KAZANDIRMA.
        DefaultTableModel tb1Model = (DefaultTableModel) tbl_joınt_project_Table.getModel();

        // Seçilen projenin ID'sini al
        String selectedProjectName = tb1Model.getValueAt(tbl_joınt_project_Table.getSelectedRow(), 1).toString();

        // theClient JFrame'ini oluştur ve görünür yap
        theClient clientFrame = new theClient(selectedProjectName);
        clientFrame.setVisible(true);
        this.dispose();

    
    }//GEN-LAST:event_tbl_joınt_project_TableMouseClicked

    private void tbl_create_project_Table1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_create_project_Table1MouseClicked
        // TODO add your handling code here:
        DefaultTableModel tb1Model = (DefaultTableModel) tbl_create_project_Table1.getModel();

        // Seçilen projenin ID'sini al
        String selectedProjectName = tb1Model.getValueAt(tbl_create_project_Table1.getSelectedRow(), 1).toString();
    
        // theClient JFrame'ini oluştur ve görünür yap
        theClient clientFrame = new theClient(selectedProjectName);
        clientFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_tbl_create_project_Table1MouseClicked

    /*
     * kullanıcının sahip olduğu tüm projeleri veritabanından çekerek bir tabloya aktarmaktadır. İşlevsel bir özet şu adımları içerir:
    Veritabanı bağlantısı oluşturulur.
    Mevcut kullanıcının kullanıcı adı alınır.
    Kullanıcının sahip olduğu projelerin veritabanından alınması için bir sorgu oluşturulur.
    Sorgu sonucunda dönen veriler, projelerin anahtarları ve isimleri ile birlikte tabloya eklenir.
    Eğer tablonun modelinde henüz sütunlar tanımlanmamışsa, sütunlar eklenir.
    Bağlantı, sonuç kümesi ve hazırlanan ifadeler kapatılır ve temizlenir.
    */
    private void btn_show_all_create_projectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_show_all_create_projectActionPerformed
        // TODO add your handling code here:
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            Class.forName("org.sqlite.JDBC");
            String dbPath = "C://Users//Casper//OneDrive//Documents//NetBeansProjects//Project//Users.db";
            conn = DriverManager.getConnection("jdbc:sqlite:" + dbPath);
            System.out.println("Connection Succeeded");

            // Get the username from the CurrentUser singleton
            String username = CurrentUser.getInstance().getUsername();

            // Query the database for all projects of the current user
            String sql = "SELECT * FROM Projects WHERE project_owner = ?";
            pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, username);
            rs = pstmt.executeQuery();

            // Get the table's model and clear it
            DefaultTableModel model = (DefaultTableModel) tbl_create_project_Table1.getModel();
            model.setRowCount(0);

            // Ensure the model has the correct columns
            if (model.getColumnCount() == 0) {
                model.addColumn("Project Key");
                model.addColumn("Project Name");
            }

            // Add each row to the table
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString("project_key"), rs.getString("project_name")});
            }

        } catch (Exception e) {
            System.out.println("Connection Failed" + e);
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }//GEN-LAST:event_btn_show_all_create_projectActionPerformed
    /*
     * mevcut kullanıcının sahip olduğu tüm projeleri görüntülemek için bir işlem gerçekleştiriyor. İşlem adımları şu şekildedir:
    Veritabanıyla bağlantı oluşturulur.
    Mevcut kullanıcı adı CurrentUser sınıfından alınır.
    Veritabanında mevcut kullanıcıya ait tüm projeleri sorgulamak için bir SQL sorgusu hazırlanır ve çalıştırılır.
    Sonuçlar bir JTable bileşeni üzerinde gösterilmek üzere hazırlanır.
    Varolan model temizlenir ve tablo için doğru sütun başlıkları eklenir.
    Her proje için bir satır oluşturulur ve tabloya eklenir.
    Bağlantı ve diğer veritabanı kaynakları kapatılır.
    kullanıcının sahip olduğu projelerin anahtarlarını ve adlarını bir tablo aracılığıyla görüntüler. Bu sayede kullanıcı, kendi projelerine hızlıca erişebilir ve yönetebilir.
     */
    //*******************************!!!!!!!!!!!!!!!!!!!!!!!********************************************** */
    private void btn_show_all_joın_projectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_show_all_joın_projectActionPerformed
        // TODO add your handling code here:
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            Class.forName("org.sqlite.JDBC");
            String dbPath = "C://Users//Casper//OneDrive//Documents//NetBeansProjects//Project//Users.db";
            conn = DriverManager.getConnection("jdbc:sqlite:" + dbPath);
            System.out.println("Connection Succeeded");

            // Get the username from the CurrentUser singleton
            String username = CurrentUser.getInstance().getUsername();

            // Query the database for all projects the user has joined
            String sql = "SELECT * FROM ProjectMembers WHERE Username = ?";
            pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, username);
            rs = pstmt.executeQuery();

            // Get the table's model and clear it
            DefaultTableModel model = (DefaultTableModel) tbl_joınt_project_Table.getModel();
            model.setRowCount(0);

            // Ensure the model has the correct columns
            if (model.getColumnCount() == 0) {
                model.addColumn("Project ID");
                model.addColumn("Project Name");
            }

            // Add each row to the table and send the project name to the client
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString("ProjectID"), rs.getString("ProjectName")});
            }

        } catch (Exception e) {
            System.out.println("Connection Failed" + e);
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }//GEN-LAST:event_btn_show_all_joın_projectActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main_bridge.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main_bridge.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main_bridge.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main_bridge.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main_bridge().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_create_Project;
    private javax.swing.JButton btn_join_project_with_project_id;
    private javax.swing.JButton btn_show_all_create_project;
    private javax.swing.JButton btn_show_all_joın_project;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tbl_create_project_Table1;
    private javax.swing.JTable tbl_joınt_project_Table;
    private javax.swing.JTextField txt_name;
    private javax.swing.JTextField txt_project_id;
    private javax.swing.JTextField txt_project_name;
    // End of variables declaration//GEN-END:variables
}

/* 

// TUM DATABESEDEKI DEĞERLERI TABLOYA YAZMA
        try {
            Statement st = con.createStatement();
            String sql = "select * from PatientLogin";
            rs = st.executeQuery(sql);

            while (rs.next()) {
                String PatientID = rs.getString("PatientID");
                String PatientName = rs.getString("PatientName");
                String Gender = rs.getString("Gender");
                String BloodGroup = rs.getString("BloodGroup");
                String Disease = rs.getString("Disease");
                String AdmitDate = rs.getString("AdmitDate");
                String RoomNO = rs.getString("RoomNO");
                String DoctorID = rs.getString("DoctorID");
                String DoctorName = rs.getString("DoctorName");
                String DischargeDate = rs.getString("DischargeDate");

                String tbData[] = {PatientID, PatientName, Gender, BloodGroup, Disease, AdmitDate, RoomNO, DoctorID, DoctorName, DischargeDate};
                DefaultTableModel tblModel = (DefaultTableModel) tbl_patient_chart_Table.getModel();
                tblModel.addRow(tbData);

            }

        } catch (Exception e) {

        }


*/



/*
        // kişinin girmiş olduğu who değerini baz aldım.
        try {
            String sql = "SELECT * From NewAccounts WHERE Who ='" + Who.Who2 + "'";
            Statement st = con.createStatement();
            rs = st.executeQuery(sql);

            if (rs.next()) {
                // Who2 değerini W atıp, Kişinin Who değeri Administrator veya Doctor ise Patient_chart'ta girmesini sağladım.
                // Administrator veya Doctor değilse You aren't Administrator or Doctor, uyarı mesajını yazmasını sağladım.
                String W = Who.Who2;
                if (W.contains("Administrator") || W.contains("Doctor")) {
                    JOptionPane.showMessageDialog(this, "You are " + Who.Who2);
                    java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Patient_Chart().setVisible(true);
            }
        });
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "You aren't Administrator or Doctor", "Warning", JOptionPane.WARNING_MESSAGE);

                }

            }

        } catch (HeadlessException | SQLException e) {
            JOptionPane.showMessageDialog(this, "Programe is failed" + e);
        }
        */






//------------------------------------------------------------

/*
try {
           // String sql = "SELECT * From NewAccounts WHERE Who ='" + Who.Who2 + "'";
            Statement st = con.createStatement();
            //rs = st.executeQuery(sql);

            if (rs.next()) {
                // Who2 değerini W atıp, Kişinin Who değeri sadece Administrator ise Accounts2'ya girmesini sağladım.
                // Administrator değilse You aren't Administrator, uyarı mesajını yazmasını sağladım.
                //String W = Who.Who2;
                /*
                if (W.contains("Administrator")) {
                    JOptionPane.showMessageDialog(this, "You are " + Who.Who2);
                    Accounts2 AC = new Accounts2();
                    AC.setVisible(true);
                    AC.pack();
                    AC.setLocationRelativeTo(null);
                    AC.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "You aren't Administrator", "Warning", JOptionPane.WARNING_MESSAGE);
                }


            }

        } catch (HeadlessException | SQLException e) {
            JOptionPane.showMessageDialog(this, "Programe is failed" + e);
        }

*/

/*
        // TABLOYA MOUSE TIKLAMA ÖZELLIĞI KAZANDIRMA.
        // AYRICA SEÇTİĞİM DEĞERİ İLGİLİ TEXTLERE ATIYOR.
        DefaultTableModel tb1Model = (DefaultTableModel) tbl_joınt_project_Table.getModel();

        String tbl_Patient_ID = tb1Model.getValueAt(tbl_joınt_project_Table.getSelectedRow(), 0).toString();
        String tbl_Room_no = tb1Model.getValueAt(tbl_joınt_project_Table.getSelectedRow(), 6).toString();
        String tbl_Doctor_ID = tb1Model.getValueAt(tbl_joınt_project_Table.getSelectedRow(), 7).toString();
        String tbl_Doctor_Name = tb1Model.getValueAt(tbl_joınt_project_Table.getSelectedRow(), 8).toString();
        String tbl_Discharge_Date = tb1Model.getValueAt(tbl_joınt_project_Table.getSelectedRow(), 9).toString();
        String tbl_Disease = tb1Model.getValueAt(tbl_joınt_project_Table.getSelectedRow(), 4).toString();

        txt_patıent_ıd.setText(tbl_Patient_ID);
        txt_room_no.setText(tbl_Room_no);
        txt_doctor_ıd.setText(tbl_Doctor_ID);
        txt_doctor_name.setText(tbl_Doctor_Name);
        txt_discharge_date.setText(tbl_Discharge_Date);
        txt_disease.setText(tbl_Disease);

        int i = tbl_joınt_project_Table.getSelectedRow();
        TableModel model = tbl_joınt_project_Table.getModel();
        String subject1 = model.getValueAt(i, 3).toString();
        switch (subject1) {
            case "0+":
            cmbb_Blood_Group.setSelectedIndex(0);
            break;
            case "0-":
            cmbb_Blood_Group.setSelectedIndex(1);
            break;
            case "AB+":
            cmbb_Blood_Group.setSelectedIndex(2);
            break;
            case "AB-":
            cmbb_Blood_Group.setSelectedIndex(3);
            break;
            case "A+":
            cmbb_Blood_Group.setSelectedIndex(4);
            break;
            case "A-":
            cmbb_Blood_Group.setSelectedIndex(5);
            break;
            case "B+":
            cmbb_Blood_Group.setSelectedIndex(6);
            break;
            case "B-":
            cmbb_Blood_Group.setSelectedIndex(7);
            break;

        }
        */